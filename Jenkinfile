pipeline {
    agent any

    tools {
        maven 'MAVEN_HOME' // Ensure Maven is installed and configured in Jenkins
        jdk 'JAVA_HOME' // Ensure JDK is installed and configured in Jenkins
    }

    environment {
        SONARQUBE_SCANNER = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        SONARQUBE_URL = 'http://localhost:9000'
        SONARQUBE_TOKEN = 'sqp_ab7fd3c89efaa7381d7f580f9b46cbf1a983ec4b'
        DOCKER_CREDENTIALS_ID = 'your-docker-credentials-id' // Jenkins credential ID for Docker
        DOCKER_IMAGE_NAME = 'your-image-name'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}" // or use another tag strategy    
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/hulkaditya007/CARscan-user.git'
            }
        }
        
        stage('Build') {
            steps {
                bat 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('LocalSonarQube') {
                    bat "${SONARQUBE_SCANNER}\\bin\\sonar-scanner.bat \
                        -Dsonar.projectKey=car-scan \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.tests=src/test/java \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.host.url=%SONARQUBE_URL% \
                        -Dsonar.login=%SONARQUBE_TOKEN% \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Testing...'
                script {
                    try {
                        snykSecurity(
                            snykInstallation: 'snyklatest', // Ensure this matches the name of the Snyk installation in Jenkins
                            snykTokenId: 'snyktoken'
                            // Add any other necessary parameters here
                        )
                    } catch (Exception e) {
                        echo "Snyk found vulnerabilities but the build will continue."
                        echo "${e}"
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    bat "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker registry
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        // Push the Docker image
                        bat "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    }
                }
            }
        }
        
    }
}
